# encoding: utf-8
# Economic of co-firing in two power plants in Vietnam
#
# (c) Minh Ha-Duong, An Ha Truong 2016-2019
# minh.haduong@gmail.com
# Creative Commons Attribution-ShareAlike 4.0 International
#
"""Print the tables for manuscript 'Costs and benefits of co-firing'.

Costs and benefits of co-firing rice straw in two Vietnamese coal power plants
An Ha Truong, Minh Ha-Duong
2017-2019
"""
#import natu.numpy as np

#from manuscript1.parameters import (MongDuong1System, NinhBinhSystem,
#                                    discount_rate, tax_rate, depreciation_period)

#from model.utils import display_as, y

#TODO: code as a system class method

#print("Business value of cofiring, total costs")
#print("Time horizon ", MongDuong1System.plant.time_horizon, " years")
#print("Discount rate ", discount_rate)
#print()

"""
def farmer_cost(system):
    return np.npv(discount_rate, system.farmer.cash_out(tax_rate, depreciation_period))


print("Farmer's collection costs   \t",
      farmer_cost(MongDuong1System), "\t",
      farmer_cost(NinhBinhSystem))


def transporter_cost(system):
    return np.npv(discount_rate, system.transporter.cash_out(tax_rate, depreciation_period))


print("Reseller's collection costs   \t",
      transporter_cost(MongDuong1System), "\t",
      transporter_cost(NinhBinhSystem))

print("Plant investment costs   \t",
      MongDuong1System.cofiring_plant.amount_invested, "\t",
      NinhBinhSystem.cofiring_plant.amount_invested)


#We could also use plant.lcoe_statement(...) but more verbose
def plant_om_cost(system):
    return np.npv(discount_rate, system.plant.operation_maintenance_cost())


def cofiring_plant_om_cost(system):
    return np.npv(discount_rate, system.cofiring_plant.operation_maintenance_cost())


def extra_om_cost(system):
    return cofiring_plant_om_cost(system) - plant_om_cost(system)


#print("Ex ante plant's O&M costs:   \t",
#      plant_om_cost(MongDuong1System), "\t", a = = ['']
        table.append(self.cofiring_plant.name)
        table.append('-------------------')
        row2 = '{:30}' + '{:20.0f}'
        table.append(row2.format('Health', self.health_npv(discount_rate, external_cost)))
        table.append(row2.format('Emission reduction',
                                 self.mitigation_npv(discount_rate, external_cost)))
        table.append(row2.format('Wages', self.wages_npv(discount_rate)))
        table.append(row2.format('Farmer earnings before tax',
                                 self.farmer.net_present_value(discount_rate)))
        table.append(row2.format('Trader earnings before tax',
                                 self.transporter.net_present_value(discount_rate)))
        return '\n'.join(table)
#      plant_om_cost(NinhBinhSystem))
#
#print("Ex post plant's O&M costs:   \t",
#      cofiring_plant_om_cost(MongDuong1System), "\t",
#      cofiring_plant_om_cost(NinhBinhSystem))

print("Additional plant O&M costs   \t",
      extra_om_cost(MongDuong1System), "\t",
      extra_om_cost(NinhBinhSystem))


def cost(system):
    return (farmer_cost(system) +
            transporter_cost(system) +
            system.cofiring_plant.amount_invested +
            extra_om_cost(system))


print("Total costs              \t",
      cost(MongDuong1System), "\t",
      cost(NinhBinhSystem))

print()

print("Coal saved                 \t",
      MongDuong1System.coal_saved[1] / y, "\t",
      NinhBinhSystem.coal_saved[1] / y)

print("Cost of coal              \t",
      display_as(MongDuong1System.price.coal, "USD/t"), "\t",
      display_as(NinhBinhSystem.price.coal, "USD/t"))


def coal_saved_value(system):
    return np.npv(discount_rate,
                  system.plant.coal_cost - system.cofiring_plant.coal_cost)


print("Coal saved value         \t",
      coal_saved_value(MongDuong1System), "\t",
      coal_saved_value(NinhBinhSystem))


def coal_saved_value_b(system):
    return np.npv(discount_rate,
                  system.coal_saved * system.price.coal)


print("Coal saved value         \t",
      display_as(coal_saved_value_b(MongDuong1System), "kUSD"), "\t",
      display_as(coal_saved_value_b(NinhBinhSystem), "kUSD"))

print()


def value(system):
    return coal_saved_value(system) - cost(system)
 a = = ['']
        table.append(self.cofiring_plant.name)
        table.append('-------------------')
        row2 = '{:30}' + '{:20.0f}'
        table.append(row2.format('Health', self.health_npv(discount_rate, external_cost)))
        table.append(row2.format('Emission reduction',
                                 self.mitigation_npv(discount_rate, external_cost)))
        table.append(row2.format('Wages', self.wages_npv(discount_rate)))
        table.append(row2.format('Farmer earnings before tax',
                                 self.farmer.net_present_value(discount_rate)))
        table.append(row2.format('Trader earnings before tax',
                                 self.transporter.net_present_value(discount_rate)))
        return '\n'.join(table)

print("Value of cofiring        \t",
      value(MongDuong1System), "\t",
      value(NinhBinhSystem))
"""
